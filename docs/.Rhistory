A$ESCOLARIDAD[2]
A$ESCOLARIDAD[3]
names(JH)
unique(JH$ESCOLARIDAD)
is.na(JH$ESCOLARIDAD)
sum(is.na(JH$ESCOLARIDAD))
A
A  <- subset(JH,ID_ZL_PER == GEOCODIGO[1])
A
JH
JH$ID_ZL_PER
A$ESCOLARIDAD[1]
A$ESCOLARIDAD[2]
A$ESCOLARIDAD[3]
A$ESCOLARIDAD[4]
JH <- subset(Pto_varas_personas, P07 == 1)
JH <- JH[JH$ESCOLARIDAD != 99,]
EJH12<-NULL
GEOCODIGO <- unique(JH$ID_ZL_PER)
for(i in 1:dim(JH)[1]){
GC <- GEOCODIGO[i]
A  <- subset(JH,ID_ZL_PER == GC)
q<-0
p<-0
for(j in 1:dim(A)[1]){
p <- p + 1
if(A$ESCOLARIDAD[j] < 12){
q <- q + 1
}
}
EJH12<-c(EJH12,(q/p)*100)
}
A$ESCOLARIDAD[1]
A$ESCOLARIDAD[1:10]
A$ESCOLARIDAD[1:100]
dim(A)
A
con                 <- dbConnect(RSQLite::SQLite(), "MVE.db") #Conexión con la base de datos
DB                  <- tbl(con, "PERSONAS") # conexión con la tabla de personas
Pto_varas_personas <- DB %>% filter(COMUNA==10109) %>% collect()
Pto_varas_personas <- as.data.frame(Pto_varas_personas)
JH <- subset(Pto_varas_personas, P07 == 1)
JH <- JH[JH$ESCOLARIDAD != 99,]
EJH12<-NULL
GEOCODIGO <- unique(JH$ID_ZL_PER)
GEOCODIGO
1:dim(A)[1]
GC
JH <- subset(Pto_varas_personas, P07 == 1)
JH <- JH[JH$ESCOLARIDAD != 99,]
EJH12<-NULL
GEOCODIGO <- unique(JH$ID_ZL_PER)
for(i in 1:length(GEOCODIGO){
JH <- subset(Pto_varas_personas, P07 == 1)
JH <- JH[JH$ESCOLARIDAD != 99,]
EJH12<-NULL
GEOCODIGO <- unique(JH$ID_ZL_PER)
for(i in 1:length(GEOCODIGO)){
GC <- GEOCODIGO[i]
A  <- subset(JH,ID_ZL_PER == GC)
q<-0
p<-0
for(j in 1:dim(A)[1]){
p <- p + 1
if(A$ESCOLARIDAD[j] < 12){
q <- q + 1
}
}
EJH12<-c(EJH12,(q/p)*100)
}
EJH12
library(rgdal)
library(DBI)
library(dplyr)
library(raster)
library(maptools)
library(rgeos)
options(scipen=999) # para que no haya notacion cientifica
#### --- Preparación datos espaciales
Zonas_urbanas <- readShapePoly(fn='R10/ZONA_C17.shp', IDvar=NULL,proj4string=crs("+init=epsg:4674"))
Localidades_rurales <- readShapePoly(fn='R10/LOCALIDAD_C17.shp', IDvar=NULL,proj4string=crs("+init=epsg:4674"))
names(Zonas_urbanas) # revisamos el atributo o columna de cada una de las capas
names(Localidades_rurales)
#### --- Filtrar por comuna -> Pto varas: 10109 <- fuente: manual del usuario censista
PtoV_urb <- subset(Zonas_urbanas,COMUNA == 10109)
PtoV_rur <- subset(Localidades_rurales,COMUNA == 10109)
PtoV_rur<-spChFIDs(PtoV_rur, paste("PtoV_rur", row.names(PtoV_rur), sep=".")) # les entrega una ID
PtoV_urb<-spChFIDs(PtoV_urb, paste("PtoV_urb", row.names(PtoV_urb), sep="."))
#### Juntar los dos .shp
Pto_varas_sp <- bind(PtoV_urb, PtoV_rur) # funcion del paquete raster que los une y hace coincidir por columna. Si no tiene valor en la columna pone NA
View(Pto_varas_sp@data)
#### --- Microdatos
con <- dbConnect(RSQLite::SQLite(), "MVE.db") #Conexión con la base de datos
DB <- tbl(con, "PERSONAS") # conexión con la tabla de personas
#### --- Filtrar por microdatos de comuna
Pto_varas <- DB %>% filter(COMUNA==10109) %>% collect() #desde aquí podemos tratarlo como dataframe típico
#### --- ¿Cuántas personas hay por zona o por localidad?
GEOCODIGO<-unique(Pto_varas$ID_ZL_PER)
CANT_PER<-NULL
for(loc in unique(Pto_varas$ID_ZL_PER)){
A<-subset(Pto_varas,ID_ZL_PER == loc)
CANT_PER<-c(CANT_PER,dim(A)[1])
}
# Conexion y filtro por comuna
con                 <- dbConnect(RSQLite::SQLite(), "MVE.db") #Conexión con la base de datos
DB                  <- tbl(con, "PERSONAS") # conexión con la tabla de personas
Pto_varas_personas <- DB %>% filter(COMUNA==10109) %>% collect()
Pto_varas_personas <- as.data.frame(Pto_varas_personas)
JH <- subset(Pto_varas_personas, P07 == 1)
JH <- JH[JH$ESCOLARIDAD != 99,]
EJH12<-NULL
GEOCODIGO <- unique(JH$ID_ZL_PER)
for(i in 1:length(GEOCODIGO)){
GC <- GEOCODIGO[i]
A  <- subset(JH,ID_ZL_PER == GC)
q<-0
p<-0
for(j in 1:dim(A)[1]){
p <- p + 1
if(A$ESCOLARIDAD[j] < 12){
q <- q + 1
}
}
EJH12<-c(EJH12,(q/p)*100)
}
PEJH<-data.frame(GEOCODIGO,EJH12)
CANT_PER
CANT_PER<-data.frame(GEOCODIGO,CANT_PER)
MAT<-data.frame(GEOCODIGO,PA,PR,PI)
library(rgdal)
library(DBI)
library(dplyr)
library(raster)
library(maptools)
library(rgeos)
options(scipen=999)
# Conexion y filtro por comuna
con                 <- dbConnect(RSQLite::SQLite(), "MVE.db") #Conexión con la base de datos
DB                  <- tbl(con, "VIVIENDAS") # conexión con la tabla de personas
Pto_varas_viviendas <- DB %>% filter(COMUNA==10109) %>% collect()
unique(Pto_varas_viviendas$P03A) #filtrar valores 98 y 99
Pto_varas_viviendas<-as.data.frame(Pto_varas_viviendas) # pasar a ambiente dataframe
Pto_varas_viviendas <- Pto_varas_viviendas[Pto_varas_viviendas$P03A != 98 || Pto_varas_viviendas$P03A != 99  ,]
Pto_varas_viviendas <- Pto_varas_viviendas[Pto_varas_viviendas$P03B != 98 || Pto_varas_viviendas$P03B != 99  ,]
Pto_varas_viviendas <- Pto_varas_viviendas[Pto_varas_viviendas$P03C != 98 || Pto_varas_viviendas$P03C != 99  ,]
#Indice de Materialidad
#P03A - Muro exterior:
#Aceptable: hormigon(1),albañileria(2) y tabique forrado por ambas caras(3)
MA <- c(1,2,3)
#Recuperable: Tabique sin forro interior(4),adobe-barro-quincha-pirca u otro material tradicional(5)
MR <- c(4,5)
#Irrecuperable:Materiales precarior(lata,carton,plastico,etc)(6)
MI <-c(6)
#P03B - Techo:
#Aceptable: Tejas o tejuelas(1), losa hormigón(2),planchas metálicas o fibrocemento(pizarreño)(3)
TA <- c(1,2,3)
#Recuperable:Fanolita o plancha de fieltro embreado(4), paja-coirón-totora-caña(5)
TR <- c(4,5)
#Irrecuperable: Materiales precarios (lata, cartón, plástico)(6) o vivienda sin techo (7)
TI <- c(6,7)
#P03C - Piso:
#Aceptable: Parquet-piso flotante-cerámico-madera-alfombra-flexit-cubrepiso u otro similar-sobre radier o vigas de madera(1)
PA<-c(1)
#Recuperable: Radier sin revestimiento(2),baldosa de cemento(3),capa de cemento sobre tierra(4)
PR<-c(2,3,4)
#Irrecuperable: Tierra(5)
PI<-c(5)
CATEGORIA <- NULL
for(j in 1:dim(Pto_varas_viviendas)[1]){
A <- Pto_varas_viviendas[j,11:13]
if((A[1] %in% MA) & (A[2] %in% TA) & (A[3] %in% PA)){
CATEGORIA <- c( CATEGORIA , 'ACEPTABLE' )
} else if((A[1] %in% MI) || (A[2] %in% TI) || (A[3] %in% PI)){
CATEGORIA <- c(CATEGORIA,'IRRECUPERABLE')
} else {
CATEGORIA <- c(CATEGORIA,'RECUPERABLE')
}
}
### Agregación a nivel de zona/localidad
Pto_varas_viviendas[,14] <- CATEGORIA
colnames(Pto_varas_viviendas)[14]<- "MATERIALIDAD"
GEOCODIGO<-unique(Pto_varas_viviendas$ID_ZL_VIV)
PA <- NULL
PR <- NULL
PI <- NULL
for(i in 1:length(GEOCODIGO)){
GC = GEOCODIGO[i]
A <- subset(Pto_varas_viviendas,ID_ZL_VIV == GC)
ACEP <- 0
REC  <- 0
IRR  <- 0
for(j in 1:dim(A)[1]){
if(A[j,14]=="ACEPTABLE"){ACEP<-ACEP+1}
if(A[j,14]=="RECUPERABLE"){REC<-REC+1}
if(A[j,14]=="IRRECUPERABLE"){IRR<-IRR+1}
}
PA<-c(PA,ACEP)
PR<-c(PR,REC)
PI<-c(PI,IRR)
}
TOTAL<-PA + PR + PI
PA<- (PA/TOTAL)*100
PR<-(PR/TOTAL)*100
PI<-(PI/TOTAL)*100
MAT<-data.frame(GEOCODIGO,PA,PR,PI)
PEJH12<-data.frame(GEOCODIGO,PEJH12)
PEJH12<-data.frame(GEOCODIGO,EJH12)
library(rgdal)
library(DBI)
library(dplyr)
library(raster)
library(maptools)
library(rgeos)
options(scipen=999)
# Conexion y filtro por comuna
con                 <- dbConnect(RSQLite::SQLite(), "MVE.db") #Conexión con la base de datos
DB                  <- tbl(con, "PERSONAS") # conexión con la tabla de personas
Pto_varas_personas <- DB %>% filter(COMUNA==10109) %>% collect()
Pto_varas_personas <- as.data.frame(Pto_varas_personas)
JH <- subset(Pto_varas_personas, P07 == 1)
JH <- JH[JH$ESCOLARIDAD != 99,]
EJH12<-NULL
GEOCODIGO <- unique(JH$ID_ZL_PER)
for(i in 1:length(GEOCODIGO)){
GC <- GEOCODIGO[i]
A  <- subset(JH,ID_ZL_PER == GC)
q<-0
p<-0
for(j in 1:dim(A)[1]){
p <- p + 1
if(A$ESCOLARIDAD[j] < 12){
q <- q + 1
}
}
EJH12<-c(EJH12,(q/p)*100)
}
PEJH12<-data.frame(GEOCODIGO,EJH12)
merge(x=MAT,y=PEJH12,x.by="GEOCODIGO",y.by="GEOCODIGO")
merge2<-merge(x=merge1,y=CANT_PER,x.by="GEOCODIGO",y.by="GEOCODIGO")
merge1<-merge(x=MAT,y=PEJH12,x.by="GEOCODIGO",y.by="GEOCODIGO")
names(merge1)
merge2<-merge(x=merge1,y=CANT_PER,x.by="GEOCODIGO",y.by="GEOCODIGO")
MAT
PEJH12
CANT_PER
merge1<-merge(x=MAT,y=PEJH12,x.by="GEOCODIGO",y.by="GEOCODIGO")
merge2<-merge(x=merge1,y=CANT_PER,x.by="GEOCODIGO",y.by="GEOCODIGO")
View(merge2)
library(rgdal)
library(DBI)
library(dplyr)
library(raster)
library(maptools)
library(rgeos)
options(scipen=999)
# Conexion y filtro por comuna
con                 <- dbConnect(RSQLite::SQLite(), "MVE.db") #Conexión con la base de datos
DB                  <- tbl(con, "VIVIENDAS") # conexión con la tabla de personas
Pto_varas_viviendas <- DB %>% filter(COMUNA==10109) %>% collect()
unique(Pto_varas_viviendas$P03A) #filtrar valores 98 y 99
Pto_varas_viviendas<-as.data.frame(Pto_varas_viviendas) # pasar a ambiente dataframe
Pto_varas_viviendas <- Pto_varas_viviendas[Pto_varas_viviendas$P03A != 98 || Pto_varas_viviendas$P03A != 99  ,]
Pto_varas_viviendas <- Pto_varas_viviendas[Pto_varas_viviendas$P03B != 98 || Pto_varas_viviendas$P03B != 99  ,]
Pto_varas_viviendas <- Pto_varas_viviendas[Pto_varas_viviendas$P03C != 98 || Pto_varas_viviendas$P03C != 99  ,]
#Indice de Materialidad
#P03A - Muro exterior:
#Aceptable: hormigon(1),albañileria(2) y tabique forrado por ambas caras(3)
MA <- c(1,2,3)
#Recuperable: Tabique sin forro interior(4),adobe-barro-quincha-pirca u otro material tradicional(5)
MR <- c(4,5)
#Irrecuperable:Materiales precarior(lata,carton,plastico,etc)(6)
MI <-c(6)
#P03B - Techo:
#Aceptable: Tejas o tejuelas(1), losa hormigón(2),planchas metálicas o fibrocemento(pizarreño)(3)
TA <- c(1,2,3)
#Recuperable:Fanolita o plancha de fieltro embreado(4), paja-coirón-totora-caña(5)
TR <- c(4,5)
#Irrecuperable: Materiales precarios (lata, cartón, plástico)(6) o vivienda sin techo (7)
TI <- c(6,7)
#P03C - Piso:
#Aceptable: Parquet-piso flotante-cerámico-madera-alfombra-flexit-cubrepiso u otro similar-sobre radier o vigas de madera(1)
PA<-c(1)
#Recuperable: Radier sin revestimiento(2),baldosa de cemento(3),capa de cemento sobre tierra(4)
PR<-c(2,3,4)
#Irrecuperable: Tierra(5)
PI<-c(5)
CATEGORIA <- NULL
for(j in 1:dim(Pto_varas_viviendas)[1]){
A <- Pto_varas_viviendas[j,11:13]
if((A[1] %in% MA) & (A[2] %in% TA) & (A[3] %in% PA)){
CATEGORIA <- c( CATEGORIA , 'ACEPTABLE' )
} else if((A[1] %in% MI) || (A[2] %in% TI) || (A[3] %in% PI)){
CATEGORIA <- c(CATEGORIA,'IRRECUPERABLE')
} else {
CATEGORIA <- c(CATEGORIA,'RECUPERABLE')
}
}
### Agregación a nivel de zona/localidad
Pto_varas_viviendas[,14] <- CATEGORIA
colnames(Pto_varas_viviendas)[14]<- "MATERIALIDAD"
GEOCODIGO<-unique(Pto_varas_viviendas$ID_ZL_VIV)
PA <- NULL
PR <- NULL
PI <- NULL
for(i in 1:length(GEOCODIGO)){
GC = GEOCODIGO[i]
A <- subset(Pto_varas_viviendas,ID_ZL_VIV == GC)
ACEP <- 0
REC  <- 0
IRR  <- 0
for(j in 1:dim(A)[1]){
if(A[j,14]=="ACEPTABLE"){ACEP<-ACEP+1}
if(A[j,14]=="RECUPERABLE"){REC<-REC+1}
if(A[j,14]=="IRRECUPERABLE"){IRR<-IRR+1}
}
PA<-c(PA,ACEP)
PR<-c(PR,REC)
PI<-c(PI,IRR)
}
MAT<-data.frame(GEOCODIGO,PA,PR,PI)
MAT
PEJH12
CANT_PER
MAT
merge1<-merge(x=MAT,y=PEJH12,x.by="GEOCODIGO",y.by="GEOCODIGO")
merge2<-merge(x=merge1,y=CANT_PER,x.by="GEOCODIGO",y.by="GEOCODIGO")
FINAL_SHP <- merge(x = Pto_varas_sp, y = merge2, by.x="GEOCODIGO",by.y="GEOCODIGO") ### JOIN
writeOGR(obj=Pto_varas1, dsn="out", layer="FINAL", driver="ESRI Shapefile",overwrite_layer = TRUE)
library(rgdal)
library(DBI)
library(dplyr)
library(raster)
library(maptools)
library(rgeos)
options(scipen=999) # para que no haya notacion cientifica
#### --- Preparación datos espaciales
Zonas_urbanas <- readShapePoly(fn='R10/ZONA_C17.shp', IDvar=NULL,proj4string=crs("+init=epsg:4674"))
Localidades_rurales <- readShapePoly(fn='R10/LOCALIDAD_C17.shp', IDvar=NULL,proj4string=crs("+init=epsg:4674"))
names(Zonas_urbanas) # revisamos el atributo o columna de cada una de las capas
names(Localidades_rurales)
#### --- Filtrar por comuna -> Pto varas: 10109 <- fuente: manual del usuario censista
PtoV_urb <- subset(Zonas_urbanas,COMUNA == 10109)
PtoV_rur <- subset(Localidades_rurales,COMUNA == 10109)
PtoV_rur<-spChFIDs(PtoV_rur, paste("PtoV_rur", row.names(PtoV_rur), sep=".")) # les entrega una ID
PtoV_urb<-spChFIDs(PtoV_urb, paste("PtoV_urb", row.names(PtoV_urb), sep="."))
#### Juntar los dos .shp
Pto_varas_sp <- bind(PtoV_urb, PtoV_rur) # funcion del paquete raster que los une y hace coincidir por columna. Si no tiene valor en la columna pone NA
View(Pto_varas_sp@data)
#### --- Microdatos
con <- dbConnect(RSQLite::SQLite(), "MVE.db") #Conexión con la base de datos
DB <- tbl(con, "PERSONAS") # conexión con la tabla de personas
#### --- Filtrar por microdatos de comuna
Pto_varas <- DB %>% filter(COMUNA==10109) %>% collect() #desde aquí podemos tratarlo como dataframe típico
#### --- ¿Cuántas personas hay por zona o por localidad?
GEOCODIGO<-unique(Pto_varas$ID_ZL_PER)
CANT_PER<-NULL
for(loc in unique(Pto_varas$ID_ZL_PER)){
A<-subset(Pto_varas,ID_ZL_PER == loc)
CANT_PER<-c(CANT_PER,dim(A)[1])
}
CANT_PER<-data.frame(GEOCODIGO,CANT_PER)
#hist(data$CANT_PER)
### --- Cruzar la data mediante columna GEOCODIGO
#Pto_varas1 <- merge(x = Pto_varas_sp, y = data, by.x="GEOCODIGO",by.y="GEOCODIGO") ### JOIN
#writeOGR(obj=Pto_varas1, dsn="out", layer="Pto_varas_no-project", driver="ESRI Shapefile",overwrite_layer = TRUE)
### --- Reproject
#Pto_varas2<-spTransform(Pto_varas1,CRS("+init=epsg:32719")) #reproyectar
#writeOGR(obj=Pto_varas2, dsn="out", layer="Pto_varas_project", driver="ESRI Shapefile",overwrite_layer = TRUE)
library(rgdal)
library(DBI)
library(dplyr)
library(raster)
library(maptools)
library(rgeos)
options(scipen=999)
# Conexion y filtro por comuna
con                 <- dbConnect(RSQLite::SQLite(), "MVE.db") #Conexión con la base de datos
DB                  <- tbl(con, "PERSONAS") # conexión con la tabla de personas
Pto_varas_personas <- DB %>% filter(COMUNA==10109) %>% collect()
Pto_varas_personas <- as.data.frame(Pto_varas_personas)
JH <- subset(Pto_varas_personas, P07 == 1)
JH <- JH[JH$ESCOLARIDAD != 99,]
EJH12<-NULL
GEOCODIGO <- unique(JH$ID_ZL_PER)
for(i in 1:length(GEOCODIGO)){
GC <- GEOCODIGO[i]
A  <- subset(JH,ID_ZL_PER == GC)
q<-0
p<-0
for(j in 1:dim(A)[1]){
p <- p + 1
if(A$ESCOLARIDAD[j] < 12){
q <- q + 1
}
}
EJH12<-c(EJH12,(q/p)*100)
}
PEJH12<-data.frame(GEOCODIGO,EJH12)
library(rgdal)
library(DBI)
library(dplyr)
library(raster)
library(maptools)
library(rgeos)
options(scipen=999)
# Conexion y filtro por comuna
con                 <- dbConnect(RSQLite::SQLite(), "MVE.db") #Conexión con la base de datos
DB                  <- tbl(con, "VIVIENDAS") # conexión con la tabla de personas
Pto_varas_viviendas <- DB %>% filter(COMUNA==10109) %>% collect()
unique(Pto_varas_viviendas$P03A) #filtrar valores 98 y 99
Pto_varas_viviendas<-as.data.frame(Pto_varas_viviendas) # pasar a ambiente dataframe
Pto_varas_viviendas <- Pto_varas_viviendas[Pto_varas_viviendas$P03A != 98 || Pto_varas_viviendas$P03A != 99  ,]
Pto_varas_viviendas <- Pto_varas_viviendas[Pto_varas_viviendas$P03B != 98 || Pto_varas_viviendas$P03B != 99  ,]
Pto_varas_viviendas <- Pto_varas_viviendas[Pto_varas_viviendas$P03C != 98 || Pto_varas_viviendas$P03C != 99  ,]
#Indice de Materialidad
#P03A - Muro exterior:
#Aceptable: hormigon(1),albañileria(2) y tabique forrado por ambas caras(3)
MA <- c(1,2,3)
#Recuperable: Tabique sin forro interior(4),adobe-barro-quincha-pirca u otro material tradicional(5)
MR <- c(4,5)
#Irrecuperable:Materiales precarior(lata,carton,plastico,etc)(6)
MI <-c(6)
#P03B - Techo:
#Aceptable: Tejas o tejuelas(1), losa hormigón(2),planchas metálicas o fibrocemento(pizarreño)(3)
TA <- c(1,2,3)
#Recuperable:Fanolita o plancha de fieltro embreado(4), paja-coirón-totora-caña(5)
TR <- c(4,5)
#Irrecuperable: Materiales precarios (lata, cartón, plástico)(6) o vivienda sin techo (7)
TI <- c(6,7)
#P03C - Piso:
#Aceptable: Parquet-piso flotante-cerámico-madera-alfombra-flexit-cubrepiso u otro similar-sobre radier o vigas de madera(1)
PA<-c(1)
#Recuperable: Radier sin revestimiento(2),baldosa de cemento(3),capa de cemento sobre tierra(4)
PR<-c(2,3,4)
#Irrecuperable: Tierra(5)
PI<-c(5)
CATEGORIA <- NULL
for(j in 1:dim(Pto_varas_viviendas)[1]){
A <- Pto_varas_viviendas[j,11:13]
if((A[1] %in% MA) & (A[2] %in% TA) & (A[3] %in% PA)){
CATEGORIA <- c( CATEGORIA , 'ACEPTABLE' )
} else if((A[1] %in% MI) || (A[2] %in% TI) || (A[3] %in% PI)){
CATEGORIA <- c(CATEGORIA,'IRRECUPERABLE')
} else {
CATEGORIA <- c(CATEGORIA,'RECUPERABLE')
}
}
### Agregación a nivel de zona/localidad
Pto_varas_viviendas[,14] <- CATEGORIA
colnames(Pto_varas_viviendas)[14]<- "MATERIALIDAD"
GEOCODIGO<-unique(Pto_varas_viviendas$ID_ZL_VIV)
PA <- NULL
PR <- NULL
PI <- NULL
for(i in 1:length(GEOCODIGO)){
GC = GEOCODIGO[i]
A <- subset(Pto_varas_viviendas,ID_ZL_VIV == GC)
ACEP <- 0
REC  <- 0
IRR  <- 0
for(j in 1:dim(A)[1]){
if(A[j,14]=="ACEPTABLE"){ACEP<-ACEP+1}
if(A[j,14]=="RECUPERABLE"){REC<-REC+1}
if(A[j,14]=="IRRECUPERABLE"){IRR<-IRR+1}
}
PA<-c(PA,ACEP)
PR<-c(PR,REC)
PI<-c(PI,IRR)
}
MAT<-data.frame(GEOCODIGO,PA,PR,PI)
merge1<-merge(x=MAT,y=PEJH12,x.by="GEOCODIGO",y.by="GEOCODIGO")
merge2<-merge(x=merge1,y=CANT_PER,x.by="GEOCODIGO",y.by="GEOCODIGO")
View(merge2)
plot(Pto_varas_sp)
class(Pto_varas_sp)
dim(Pto_varas_sp)
FINAL_SHP <- merge(x = Pto_varas_sp, y = merge2, by.x="GEOCODIGO",by.y="GEOCODIGO") ### JOIN
writeOGR(obj=FINAL_SHP, dsn="out", layer="FINAL", driver="ESRI Shapefile",overwrite_layer = TRUE)
library(rgdal)
library(DBI)
library(dplyr)
library(raster)
library(maptools)
library(rgeos)
options(scipen=999) # para que no haya notacion cientifica
#### --- Preparación datos espaciales
Zonas_urbanas <- readShapePoly(fn='R10/ZONA_C17.shp', IDvar=NULL,proj4string=crs("+init=epsg:4674"))
Localidades_rurales <- readShapePoly(fn='R10/LOCALIDAD_C17.shp', IDvar=NULL,proj4string=crs("+init=epsg:4674"))
names(Zonas_urbanas) # revisamos el atributo o columna de cada una de las capas
names(Localidades_rurales)
#### --- Filtrar por comuna -> Pto varas: 10109 <- fuente: manual del usuario censista
PtoV_urb <- subset(Zonas_urbanas,COMUNA == 10109)
PtoV_rur <- subset(Localidades_rurales,COMUNA == 10109)
PtoV_rur<-spChFIDs(PtoV_rur, paste("PtoV_rur", row.names(PtoV_rur), sep=".")) # les entrega una ID
PtoV_urb<-spChFIDs(PtoV_urb, paste("PtoV_urb", row.names(PtoV_urb), sep="."))
#### Juntar los dos .shp
Pto_varas_sp <- bind(PtoV_urb, PtoV_rur) # funcion del paquete raster que los une y hace coincidir por columna. Si no tiene valor en la columna pone NA
View(Pto_varas_sp@data)
#### --- Microdatos
con <- dbConnect(RSQLite::SQLite(), "MVE.db") #Conexión con la base de datos
DB <- tbl(con, "PERSONAS") # conexión con la tabla de personas
#### --- Filtrar por microdatos de comuna
Pto_varas <- DB %>% filter(COMUNA==10109) %>% collect() #desde aquí podemos tratarlo como dataframe típico
#### --- ¿Cuántas personas hay por zona o por localidad?
GEOCODIGO<-unique(Pto_varas$ID_ZL_PER)
CANT_PER<-NULL
for(loc in unique(Pto_varas$ID_ZL_PER)){
A<-subset(Pto_varas,ID_ZL_PER == loc)
CANT_PER<-c(CANT_PER,dim(A)[1])
}
CANT_PER<-data.frame(GEOCODIGO,CANT_PER)
CANT_PER
