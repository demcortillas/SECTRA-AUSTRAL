Pto_varas_sp <- select(Pto_varas_sp, REGION.1, PROVINCIA.1,COMUNA.1,NOM_COMUNA.1,GEOCODIGO.1)
Pto_varas_sp <- select(Pto_varas_sp, REGION.2, PROVINCIA.2,COMUNA.2,NOM_COMUNA.2,GEOCODIGO.2)
Pto_varas_sp <- select(Pto_varas_sp, 'REGION.2', PROVINCIA.2,COMUNA.2,NOM_COMUNA.2,GEOCODIGO.2)
Pto_varas_sp <- Pto_varas_sp %>% select(REGION.2, PROVINCIA.2,COMUNA.2,NOM_COMUNA.2,GEOCODIGO.2)
Pto_varas_sp <- Pto_varas_sp[,c(1,2,3,4,5,6,10)]
names((Pto_varas_sp))
colnames(Pto_varas_sp)  <-c("REGION","NOM_REGION","PROVINCIA","NOM_PROVIN","COMUNA","NOM_COMUNA","GEOCODIGO")
colnames(Pto_varas_sp)
names(Pto_varas_sp)  <-c("REGION","NOM_REGION","PROVINCIA","NOM_PROVIN","COMUNA","NOM_COMUNA","GEOCODIGO")
names(Pto_varas_sp)
library(rgdal)
library(DBI)
library(dplyr)
library(raster) #contiene función union
#### --- Preparación datos espaciales
Zonas_urbanas       <-readOGR(dsn='R10/ZONA_C17.shp')
Localidades_rurales <-readOGR('R10/LOCALIDAD_C17.shp')
names(Zonas_urbanas) #revisamos el atributo o columna de cada una de las capas
names(Localidades_rurales)
#### --- Filtrar por comuna -> Pto varas: 10109 <- fuente: manual del usuario censista
PtoV_urb <- subset(Zonas_urbanas,COMUNA == 10109)
PtoV_rur <- subset(Localidades_rurales,COMUNA == 10109)
#### Juntar los dos .shp
Pto_varas_sp            <- union(PtoV_urb,PtoV_rur)
Pto_varas_sp            <- Pto_varas_sp[,c(1,2,3,4,5,6,10)]
names(Pto_varas_sp)  <-c("REGION","NOM_REGION","PROVINCIA","NOM_PROVIN","COMUNA","NOM_COMUNA","GEOCODIGO")
#### --- Microdatos
con <- dbConnect(RSQLite::SQLite(), "D:/PROJECTS/db/CENSO2017/microdatos/MVE.db") #Conexión con la base de datos
DB <- tbl(con, "PERSONAS") # conexión con la tabla de personas
#### --- Filtrar por microdatos de comuna
Pto_varas <- DB %>% filter(COMUNA==10109) %>% collect() #desde aquí podemos tratarlo como dataframe típico
### ¿cuántas personas hay por zona o por localidad?
GEOCODIGO<-unique(Pto_varas$ID_ZONA_LOC)
CANT_PER<-NULL
for(localidad in unique(Pto_varas$ID_ZONA_LOC)){
A<-subset(Pto_varas,ID_ZONA_LOC == localidad)
CANT_PER<-c(CANT_PER,dim(A)[1])
}
data<-data.frame(GEOCODIGO,CANT_PER)
Pto_varas<-merge(x=Pto_varas_sp,y=data,by="GEOCODIGO")
class(Pto_varas)
dim(Pto_varas)
Pto_varas<-merge(x=Pto_varas_sp,y=data,by="GEOCODIGO",all=FALSE)
dim(Pto_varas)
dim(data)
class(data$GEOCODIGO)
class(Pto_varas_sp$GEOCODIGO)
CANT_PER<-as.character(CANT_PER)
data<-data.frame(GEOCODIGO,CANT_PER)
Pto_varas<-merge(x=Pto_varas_sp,y=data,by="GEOCODIGO",all=FALSE)
dim(Pto_varas)
Pto_varas<-merge(x=Pto_varas_sp,y=data,by="GEOCODIGO",all=TRUE)
dim(Pto_varas)
Pto_varas<-merge(x=Pto_varas_sp,y=data,by="GEOCODIGO",all=FALSE)
class(Pto_varas_sp$GEOCODIGO)
class(data$GEOCODIGO)
library(rgdal)
library(DBI)
library(dplyr)
library(raster) #contiene función union
#### --- Preparación datos espaciales
Zonas_urbanas       <-readOGR(dsn='R10/ZONA_C17.shp')
Localidades_rurales <-readOGR('R10/LOCALIDAD_C17.shp')
names(Zonas_urbanas) #revisamos el atributo o columna de cada una de las capas
names(Localidades_rurales)
#### --- Filtrar por comuna -> Pto varas: 10109 <- fuente: manual del usuario censista
PtoV_urb <- subset(Zonas_urbanas,COMUNA == 10109)
PtoV_rur <- subset(Localidades_rurales,COMUNA == 10109)
#### Juntar los dos .shp
Pto_varas_sp            <- union(PtoV_urb,PtoV_rur)
Pto_varas_sp            <- Pto_varas_sp[,c(1,2,3,4,5,6,10)]
names(Pto_varas_sp)  <-c("REGION","NOM_REGION","PROVINCIA","NOM_PROVIN","COMUNA","NOM_COMUNA","GEOCODIGO")
#### --- Microdatos
con <- dbConnect(RSQLite::SQLite(), "D:/PROJECTS/db/CENSO2017/microdatos/MVE.db") #Conexión con la base de datos
DB <- tbl(con, "PERSONAS") # conexión con la tabla de personas
#### --- Filtrar por microdatos de comuna
Pto_varas <- DB %>% filter(COMUNA==10109) %>% collect() #desde aquí podemos tratarlo como dataframe típico
### ¿cuántas personas hay por zona o por localidad?
GEOCODIGO<-unique(Pto_varas$ID_ZONA_LOC)
CANT_PER<-NULL
for(localidad in unique(Pto_varas$ID_ZONA_LOC)){
A<-subset(Pto_varas,ID_ZONA_LOC == localidad)
CANT_PER<-c(CANT_PER,dim(A)[1])
}
data<-data.frame(GEOCODIGO,CANT_PER)
class(data$GEOCODIGO)
class(data$GEOCODIGO)
class(Pto_varas_sp$GEOCODIGO)
data<-data.frame(as.character(GEOCODIGO),CANT_PER)
names(data)
data<-data.frame(GEOCODIGO=as.character(GEOCODIGO),CANT_PER)
names(data)
Pto_varas<-merge(x=Pto_varas_sp,y=data,by="GEOCODIGO",all=FALSE)
class(data$GEOCODIGO)
class(Pto_varas_sp$GEOCODIGO)
Pto_varas<-merge(x=Pto_varas_sp,y=data,by.x="GEOCODIGO",y="GEOCODIGO")
Pto_varas<-merge(x=Pto_varas_sp,y=data,by.x="GEOCODIGO",by.y="GEOCODIGO")
dim(Pto_varas)
Pto_varas
Pto_varas@data
Pto_varas_sp
Pto_varas_sp@data
Pto_varas_sp            <- union(PtoV_urb,PtoV_rur)
Pto_varas_sp@data
Pto_varas_sp@data
plot(Pto_varas_sp)
plot(PtoV_urb)
plot(PtoV_urb@polygons)
class(PtoV_urb@polygons)
class(PtoV_urb)
class(PtoV_rur)
plot(PtoV_rur)
plot(PtoV_urb)
PtoV_rur@data
PtoV_urb@data
st_union()
#library(raster) #contiene función union
library(st_combine)
#library(raster) #contiene función union
library(sf)
st_union()
st_union(PtoV_urb,PtoV_rur)
Zonas_urbanas       <-st_read(dsn='R10/ZONA_C17.shp')
Localidades_rurales <-st_read('R10/LOCALIDAD_C17.shp')
names(Zonas_urbanas)
#library(rgdal)
library(DBI)
library(dplyr)
#library(raster) #contiene función union
library(sf)
Zonas_urbanas       <-st_read(dsn='R10/ZONA_C17.shp') #posee columna geometry
Localidades_rurales <-st_read('R10/LOCALIDAD_C17.shp')
names(Zonas_urbanas) # revisamos el atributo o columna de cada una de las capas
names(Localidades_rurales)
PtoV_urb <- subset(Zonas_urbanas,COMUNA == 10109)
PtoV_rur <- subset(Localidades_rurales,COMUNA == 10109)
st_union(PtoV_urb,PtoV_rur)
Pto_varas_sp <- st_union(PtoV_urb,PtoV_rur)
dim(Pto_varas_sp)
dim(PtoV_rur)
dim(PtoV_urb)
Pto_varas_sp <- st_union(PtoV_urb,PtoV_rur,by_feature = FALSE)
dim(Pto_varas_sp)
Pto_varas_sp <- st_union(PtoV_urb,PtoV_rur,by_feature = TRUE)
dim(Pto_varas_sp)
Pto_varas_sp <- st_combine(PtoV_urb,PtoV_rur,by_feature = TRUE)
Pto_varas_sp <- st_combine(PtoV_urb,PtoV_rur)
rbind(PtoV_urb,PtoV_rur)
rowbind(PtoV_urb,PtoV_rur)
bind(PtoV_urb,PtoV_rur)
library(raster) #contiene función union
union(PtoV_urb,PtoV_rur)
A<-union(PtoV_urb,PtoV_rur)
A
A
names(A)
A
str(A)
class(Ptov_urb)
class(PtoV_urb)
A<-merge(PtoV_urb,PtoV_rur)
A<-st_join(PtoV_urb,PtoV_rur)
A
dim(A)
library(maptools)
Zonas_urbanas <- readShapePoly(fn='R10/ZONA_C17.shp', IDvar=NULL)
Localidades_rurales <- readShapePoly(fn='R10/LOCALIDAD_C17.shp', IDvar=NULL)
class(Zonas_urbanas)
A<-rbind(PtoV_rur,PtoV_urb)
PtoV_urb <- subset(Zonas_urbanas,COMUNA == 10109)
PtoV_rur <- subset(Localidades_rurales,COMUNA == 10109)
class(PtoV_rur)
A<-rbind(PtoV_rur,PtoV_urb)
names(PtoV_urb)
A<-rbind(PtoV_rur,PtoV_urb,makeUniqueIDs = TRUE)
PtoV_rur<-spChFIDs(PtoV_rur, paste("PtoV_rur", row.names(PtoV_rur), sep="."))
names(PtoV_rur)
ab <- rbind(PtoV_urb, PtoV_rur, makeUniqueIDs = TRUE)
PtoV_rur
PtoV_urb <- subset(Zonas_urbanas,COMUNA == 10109)
PtoV_rur <- subset(Localidades_rurales,COMUNA == 10109)
PtoV_rur<-spChFIDs(PtoV_rur, paste("PtoV_rur", row.names(PtoV_rur), sep="."))
PtoV_urb<-spChFIDs(PtoV_urb, paste("PtoV_urb", row.names(PtoV_urb), sep="."))
ab <- rbind(PtoV_urb, PtoV_rur, makeUniqueIDs = TRUE)
ab <- unionSpatialPolygons(PtoV_urb, PtoV_rur)
ab <- union(PtoV_urb, PtoV_rur)
ab
dim(ab)
ab@data
ab <- bind(PtoV_urb, PtoV_rur)
names(ab)
ab
dim(ab)
ab@data
View(ab@data)
library(rgdal)
library(DBI)
library(dplyr)
library(raster) #contiene función union
library(sf)
#### --- Preparación datos espaciales
Zonas_urbanas <- readShapePoly(fn='R10/ZONA_C17.shp', IDvar=NULL)
Localidades_rurales <- readShapePoly(fn='R10/LOCALIDAD_C17.shp', IDvar=NULL)
names(Zonas_urbanas) # revisamos el atributo o columna de cada una de las capas
names(Localidades_rurales)
#### --- Filtrar por comuna -> Pto varas: 10109 <- fuente: manual del usuario censista
PtoV_urb <- subset(Zonas_urbanas,COMUNA == 10109)
PtoV_rur <- subset(Localidades_rurales,COMUNA == 10109)
PtoV_rur<-spChFIDs(PtoV_rur, paste("PtoV_rur", row.names(PtoV_rur), sep=".")) # les entrega una ID
PtoV_urb<-spChFIDs(PtoV_urb, paste("PtoV_urb", row.names(PtoV_urb), sep="."))
library(rgdal)
library(DBI)
library(dplyr)
library(raster) #contiene función union
library(sf)
Zonas_urbanas <- readShapePoly(fn='R10/ZONA_C17.shp', IDvar=NULL)
Localidades_rurales <- readShapePoly(fn='R10/LOCALIDAD_C17.shp', IDvar=NULL)
names(Zonas_urbanas) # revisamos el atributo o columna de cada una de las capas
names(Localidades_rurales)
PtoV_urb <- subset(Zonas_urbanas,COMUNA == 10109)
PtoV_rur <- subset(Localidades_rurales,COMUNA == 10109)
PtoV_rur<-spChFIDs(PtoV_rur, paste("PtoV_rur", row.names(PtoV_rur), sep=".")) # les entrega una ID
PtoV_urb<-spChFIDs(PtoV_urb, paste("PtoV_urb", row.names(PtoV_urb), sep="."))
Pto_varas_sp <- bind(PtoV_urb, PtoV_rur) # funcion del paquete raster que los une y hace coincidir por columna. Si no tiene valor en la columna pone NA
View(Pto_varas_sp)
View(Pto_varas_sp)
Pto_varas_sp <- bind(PtoV_urb, PtoV_rur) # funcion del paquete raster que los une y hace coincidir por columna. Si no tiene valor en la columna pone NA
View(Pto_varas_sp)
View(Pto_varas_sp@data)
library(rgdal)
library(DBI)
library(dplyr)
library(raster) #contiene función union
library(sf)
#### --- Preparación datos espaciales
Zonas_urbanas <- readShapePoly(fn='R10/ZONA_C17.shp', IDvar=NULL)
Localidades_rurales <- readShapePoly(fn='R10/LOCALIDAD_C17.shp', IDvar=NULL)
names(Zonas_urbanas) # revisamos el atributo o columna de cada una de las capas
names(Localidades_rurales)
#### --- Filtrar por comuna -> Pto varas: 10109 <- fuente: manual del usuario censista
PtoV_urb <- subset(Zonas_urbanas,COMUNA == 10109)
PtoV_rur <- subset(Localidades_rurales,COMUNA == 10109)
PtoV_rur<-spChFIDs(PtoV_rur, paste("PtoV_rur", row.names(PtoV_rur), sep=".")) # les entrega una ID
PtoV_urb<-spChFIDs(PtoV_urb, paste("PtoV_urb", row.names(PtoV_urb), sep="."))
#### Juntar los dos .shp
Pto_varas_sp <- bind(PtoV_urb, PtoV_rur) # funcion del paquete raster que los une y hace coincidir por columna. Si no tiene valor en la columna pone NA
View(Pto_varas_sp@data)
con <- dbConnect(RSQLite::SQLite(), "D:/PROJECTS/db/CENSO2017/microdatos/MVE.db") #Conexión con la base de datos
DB <- tbl(con, "PERSONAS") # conexión con la tabla de personas
Pto_varas <- DB %>% filter(COMUNA==10109) %>% collect() #desde aquí podemos tratarlo como dataframe típico
GEOCODIGO<-unique(Pto_varas$ID_ZONA_LOC)
CANT_PER<-NULL
for(localidad in unique(Pto_varas$ID_ZONA_LOC)){
A<-subset(Pto_varas,ID_ZONA_LOC == localidad)
CANT_PER<-c(CANT_PER,dim(A)[1])
}
data<-data.frame(GEOCODIGO=as.character(GEOCODIGO),CANT_PER)
Pto_varas<-merge(x=Pto_varas_sp,y=data,by.x="GEOCODIGO",by.y="GEOCODIGO")
class(Pto_varas)
View(Pto_varas@data)
writeOGR(obj=Pto_varas, dsn="out", layer="Pto_varas", driver="ESRI Shapefile")
Zonas_urbanas <- readShapePoly(fn='R10/ZONA_C17.shp', IDvar=NULL)
Localidades_rurales <- readShapePoly(fn='R10/LOCALIDAD_C17.shp', IDvar=NULL)
names(Zonas_urbanas) # revisamos el atributo o columna de cada una de las capas
names(Localidades_rurales)
library(rgdal)
library(DBI)
library(dplyr)
library(raster)
library(sf)
Zonas_urbanas <- readShapePoly(fn='R10/ZONA_C17.shp', IDvar=NULL)
Localidades_rurales <- readShapePoly(fn='R10/LOCALIDAD_C17.shp', IDvar=NULL)
names(Zonas_urbanas) # revisamos el atributo o columna de cada una de las capas
names(Localidades_rurales)
PtoV_urb <- subset(Zonas_urbanas,COMUNA == 10109)
PtoV_rur <- subset(Localidades_rurales,COMUNA == 10109)
PtoV_rur<-spChFIDs(PtoV_rur, paste("PtoV_rur", row.names(PtoV_rur), sep=".")) # les entrega una ID
PtoV_urb<-spChFIDs(PtoV_urb, paste("PtoV_urb", row.names(PtoV_urb), sep="."))
Pto_varas_sp <- bind(PtoV_urb, PtoV_rur) # funcion del paquete raster que los une y hace coincidir por columna. Si no tiene valor en la columna pone NA
con <- dbConnect(RSQLite::SQLite(), "D:/PROJECTS/db/CENSO2017/microdatos/MVE.db")
DB <- tbl(con, "PERSONAS")
Pto_varas <- DB %>% filter(COMUNA==10109) %>% collect()
Zonas_urbanas <- readShapePoly(fn='R10/ZONA_C17.shp', IDvar=NULL)
Localidades_rurales <- readShapePoly(fn='R10/LOCALIDAD_C17.shp', IDvar=NULL)
names(Zonas_urbanas) # revisamos el atributo o columna de cada una de las capas
names(Localidades_rurales)
PtoV_urb <- subset(Zonas_urbanas,COMUNA == 10109)
PtoV_rur <- subset(Localidades_rurales,COMUNA == 10109)
PtoV_rur<-spChFIDs(PtoV_rur, paste("PtoV_rur", row.names(PtoV_rur), sep=".")) # les entrega una ID
PtoV_urb<-spChFIDs(PtoV_urb, paste("PtoV_urb", row.names(PtoV_urb), sep="."))
PtoV_urb <- subset(Zonas_urbanas,COMUNA == 10109)
PtoV_rur <- subset(Localidades_rurales,COMUNA == 10109)
PtoV_rur<-spChFIDs(PtoV_rur, paste("PtoV_rur", row.names(PtoV_rur), sep=".")) # les entrega una ID
PtoV_urb<-spChFIDs(PtoV_urb, paste("PtoV_urb", row.names(PtoV_urb), sep="."))
Pto_varas_sp <- bind(PtoV_urb, PtoV_rur) # funcion del paquete raster que los une y hace coincidir por columna. Si no tiene valor en la columna pone NA
con <- dbConnect(RSQLite::SQLite(), "D:/PROJECTS/db/CENSO2017/microdatos/MVE.db")
DB <- tbl(con, "PERSONAS")
Pto_varas <- DB %>% filter(COMUNA==10109) %>% collect()
GEOCODIGO<-unique(Pto_varas$ID_ZONA_LOC)
CANT_PER<-NULL
for(localidad in unique(Pto_varas$ID_ZONA_LOC)){
A<-subset(Pto_varas,ID_ZONA_LOC == localidad)
CANT_PER<-c(CANT_PER,dim(A)[1])
}
data<-data.frame(GEOCODIGO=as.character(GEOCODIGO),CANT_PER)
hist(data$GEOCODIGO)
GEOCODIGO<-unique(Pto_varas$ID_ZONA_LOC)
CANT_PER<-NULL
for(localidad in unique(Pto_varas$ID_ZONA_LOC)){
A<-subset(Pto_varas,ID_ZONA_LOC == localidad)
CANT_PER<-c(CANT_PER,dim(A)[1])
}
data<-data.frame(GEOCODIGO=as.character(GEOCODIGO),CANT_PER)
hist(data$CANT_PER)
GEOCODIGO<-unique(Pto_varas$ID_ZONA_LOC)
CANT_PER<-NULL
for(localidad in unique(Pto_varas$ID_ZONA_LOC)){
A<-subset(Pto_varas,ID_ZONA_LOC == localidad)
CANT_PER<-c(CANT_PER,dim(A)[1])
}
data<-data.frame(GEOCODIGO=as.character(GEOCODIGO),CANT_PER)
hist(data$CANT_PER,xlab='cantidad personas')
Pto_varas<-merge(x=Pto_varas_sp,y=data,by.x="GEOCODIGO",by.y="GEOCODIGO")
writeOGR(obj=Pto_varas, dsn="out", layer="Pto_varas", driver="ESRI Shapefile",overwrite_layer=TRUE)
Zonas_urbanas <- readShapePoly(fn='R10/ZONA_C17.shp', IDvar=NULL)
Localidades_rurales <- readShapePoly(fn='R10/LOCALIDAD_C17.shp', IDvar=NULL)
names(Zonas_urbanas) # revisamos el atributo o columna de cada una de las capas
names(Localidades_rurales)
library(rgdal)
library(DBI)
library(dplyr)
library(raster)
library(sf)
library(rgdal)
library(DBI)
library(dplyr)
library(raster)
library(sf)
Zonas_urbanas <- readShapePoly(fn='R10/ZONA_C17.shp', IDvar=NULL)
Localidades_rurales <- readShapePoly(fn='R10/LOCALIDAD_C17.shp', IDvar=NULL)
names(Zonas_urbanas) # revisamos el atributo o columna de cada una de las capas
names(Localidades_rurales)
Zonas_urbanas <- readShapePoly(fn='R10/ZONA_C17.shp', IDvar=NULL)
Localidades_rurales <- readShapePoly(fn='R10/LOCALIDAD_C17.shp', IDvar=NULL)
names(Zonas_urbanas)
names(Localidades_rurales)
Zonas_urbanas <- readShapePoly(fn='R10/ZONA_C17.shp', IDvar=NULL)
Localidades_rurales <- readShapePoly(fn='R10/LOCALIDAD_C17.shp', IDvar=NULL)
names(Zonas_urbanas)
names(Localidades_rurales)
library(rgdal)
library(DBI)
library(dplyr)
library(raster)
library(sf)
Zonas_urbanas <- st_read(fn='R10/ZONA_C17.shp', IDvar=NULL)
library(rgdal)
library(DBI)
library(dplyr)
library(raster)
library(sf)
library(maptools)
library(rgdal)
library(DBI)
library(dplyr)
library(raster)
library(sf)
library(maptools)
Entidades<- readShapePoly('R10/ENTIDAD_IND_C17.shp')
Entidad_pto_varas <- subset(Entidades,COMUNA == 10109)
densidad<-Entidad_pto_varas@data
names(densidad)
PtoV_urb <- subset(Zonas_urbanas,COMUNA == 10109)
PtoV_rur <- subset(Localidades_rurales,COMUNA == 10109)
PtoV_rur<-spChFIDs(PtoV_rur, paste("PtoV_rur", row.names(PtoV_rur), sep=".")) PtoV_urb<-spChFIDs(PtoV_urb, paste("PtoV_urb", row.names(PtoV_urb), sep="."))
PtoV_urb <- subset(Zonas_urbanas,COMUNA == 10109)
PtoV_rur <- subset(Localidades_rurales,COMUNA == 10109)
PtoV_rur<-spChFIDs(PtoV_rur, paste("PtoV_rur", row.names(PtoV_rur), sep=".")) PtoV_urb<-spChFIDs(PtoV_urb, paste("PtoV_urb", row.names(PtoV_urb), sep="."))
densidad<-Entidad_pto_varas@data$TOTAL_PERS/Entidad_pto_varas@data$SHAPE_Area
hist(densidad)
summary(Entidad_pto_varas@data$SHAPE_Area)
library(rgdal)
library(DBI)
library(dplyr)
library(raster)
library(sf)
library(maptools)
options(scipen=999)
densidad<-Entidad_pto_varas@data$TOTAL_PERS/Entidad_pto_varas@data$SHAPE_Area
hist(densidad)
summary(Entidad_pto_varas@data$SHAPE_Area)
densidad<-Entidad_pto_varas@data$TOTAL_PERS/(Entidad_pto_varas@data$SHAPE_Area)*10000
hist(densidad)
summary(Entidad_pto_varas@data$SHAPE_Area)
densidad<-Entidad_pto_varas@data$TOTAL_PERS/(Entidad_pto_varas@data$SHAPE_Area)/10000
hist(densidad)
summary(Entidad_pto_varas@data$SHAPE_Area)
densidad<-Entidad_pto_varas@data$TOTAL_PERS/(Entidad_pto_varas@data$SHAPE_Area)/10000
hist(densidad)
summary((Entidad_pto_varas@data$SHAPE_Area)/1000000)
densidad<-Entidad_pto_varas@data$TOTAL_PERS/(Entidad_pto_varas@data$SHAPE_Area)/10000
hist(densidad)
str(Entidad_pto_varas@polygons)
densidad<-Entidad_pto_varas@data$TOTAL_PERS/(Entidad_pto_varas@data$SHAPE_Area)/10000
hist(densidad)
Entidad_pto_varas@polygons$area
Entidad_pto_varas@polygons$area
Entidad_pto_varas@polygons
surfArea(Entidad_pto_varas@polygons)
surfaceArea(Entidad_pto_varas@polygons)
surfaceArea(Entidad_pto_varas)
area(surfaceArea)
densidad<-Entidad_pto_varas@data$TOTAL_PERS/(Entidad_pto_varas@data$SHAPE_Area)/10000
hist(densidad)
areaPoly(Entidad_pto_varas)
densidad<-Entidad_pto_varas@data$TOTAL_PERS/(Entidad_pto_varas@data$SHAPE_Area)/10000
hist(densidad)
areaPoly(sp.object=Entidad_pto_varas)
densidad<-Entidad_pto_varas@data$TOTAL_PERS/(Entidad_pto_varas@data$SHAPE_Area)/10000
hist(densidad)
areaPoly(sp.object=Entidad_pto_varas)
densidad<-Entidad_pto_varas@data$TOTAL_PERS/(Entidad_pto_varas@data$SHAPE_Area)/10000
hist(densidad)
area.Poly(sp.object=Entidad_pto_varas)
library(rgdal)
library(DBI)
library(dplyr)
library(raster)
library(sf)
library(maptools)
library(rgeos)
options(scipen=999)
densidad<-Entidad_pto_varas@data$TOTAL_PERS/(Entidad_pto_varas@data$SHAPE_Area)/10000
hist(densidad)
gArea(Entidad_pto_varas)
densidad<-Entidad_pto_varas@data$TOTAL_PERS/(Entidad_pto_varas@data$SHAPE_Area)/10000
hist(densidad)
area(Entidad_pto_varas)
densidad<-Entidad_pto_varas@data$TOTAL_PERS/area(Entidad_pto_varas)/10000
hist(densidad)
area(Entidad_pto_varas)
densidad<-Entidad_pto_varas@data$TOTAL_PERS/area(Entidad_pto_varas)
hist(densidad)
area(Entidad_pto_varas)
Entidad_pto_varas
Entidades<- readShapePoly('R10/ENTIDAD_IND_C17.shp',crs = 4326)
crs(Entidades)
crs(Entidades)<-4326
class(Entidades)
crs(3819)
crs(5361)
crs(32719)
CRS(32719)
Entidades<- readShapePoly('R10/ENTIDAD_IND_C17.shp',proj4string =crs("+init=epsg:32719"))
Entidad_pto_varas <- subset(Entidades,COMUNA == 10109)
densidad<-Entidad_pto_varas@data$TOTAL_PERS/area(Entidad_pto_varas)
hist(densidad)
area(Entidad_pto_varas)
Entidades<- readShapePoly('R10/ENTIDAD_IND_C17.shp',proj4string =crs("+init=epsg:32719"))
Entidad_pto_varas <- subset(Entidades,COMUNA == 10109)
densidad<-Entidad_pto_varas@data$TOTAL_PERS/area(Entidad_pto_varas)
hist(densidad)
area(Entidad_pto_varas)
Entidades
Entidad_pto_varas
densidad<-Entidad_pto_varas@data$TOTAL_PERS/area(Entidad_pto_varas)
hist(densidad)
area(Entidad_pto_varas)
area(Entidad_pto_varas)
Entidad_pto_varas
Entidad_pto_varas@proj4string
Entidad_pto_varas@bbox
Entidad_pto_varas@plotOrder
area(Entidad_pto_varas)
Entidades<- reafOGR('R10/ENTIDAD_IND_C17.shp',proj4string =crs("+init=epsg:32719"))
Entidades<- readOGR('R10/ENTIDAD_IND_C17.shp',proj4string =crs("+init=epsg:32719"))
Entidades<- st_read('R10/ENTIDAD_IND_C17.shp',proj4string =crs("+init=epsg:32719"))
Entidades<- readShapePoly('R10/ENTIDAD_IND_C17.shp',proj4string =crs("+init=epsg:32719"))
Entidad_pto_varas <- subset(Entidades,COMUNA == 10109)
Entidades<- shapefile('R10/ENTIDAD_IND_C17.shp')
Entidad_pto_varas <- subset(Entidades,COMUNA == 10109)
Entidades<- shapefile('R10/ENTIDAD_IND_C17.shp',proj4string =crs("+init=epsg:32719"))
Entidades<- shapefile('R10/ENTIDAD_IND_C17.shp')
Entidad_pto_varas <- subset(Entidades,COMUNA == 10109)
Entidades<- shapefile('R10/ENTIDAD_IND_C17.shp')
crs(x)
Entidades<- shapefile('R10/ENTIDAD_IND_C17.shp')
crs(Entidades)
Entidad_pto_varas <- subset(Entidades,COMUNA == 10109)
Entidades<- shapefile('R10/ENTIDAD_IND_C17.shp')
#crs(Entidades)<-
Entidad_pto_varas <- subset(Entidades,COMUNA == 10109)
raster::area(Entidad_pto_varas)
Entidades<- shapefile('R10/ENTIDAD_IND_C17.shp')
Entidad_pto_varas <- subset(Entidades,COMUNA == 10109)
#raster::area(Entidad_pto_varas)
crs(Entidades)
Entidades<- shapefile('R10/ENTIDAD_IND_C17.shp')
Entidad_pto_varas <- subset(Entidades,COMUNA == 10109)
Entidad_pto_varas <- spTransform(Entidad_pto_varas, crs("+init=epsg:32719"))
raster::area(Entidad_pto_varas)
area(Entidad_pto_varas)
densidad <- Entidad_pto_varas@data$TOTAL_PERS / (area(Entidad_pto_varas))/10000
hist(densidad)
area(Entidad_pto_varas))/10000
area(Entidad_pto_varas)
area(Entidad_pto_varas)/10000
densidad <- Entidad_pto_varas@data$TOTAL_PERS / (area(Entidad_pto_varas)/10000)
hist(densidad)
densidad <- Entidad_pto_varas@data$TOTAL_PERS / (area(Entidad_pto_varas)/10000)
hist(densidad,xlab='cantidad personas por ha')
hist(log(densidad),xlab='cantidad personas por ha')
