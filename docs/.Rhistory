names(Localidades_rurales)
#### --- Filtrar por comuna -> Pto varas: 10109 <- fuente: manual del usuario censista
PtoV_urb <- subset(Zonas_urbanas,COMUNA == 10109)
PtoV_rur <- subset(Localidades_rurales,COMUNA == 10109)
PtoV_rur<-spChFIDs(PtoV_rur, paste("PtoV_rur", row.names(PtoV_rur), sep=".")) # les entrega una ID
PtoV_urb<-spChFIDs(PtoV_urb, paste("PtoV_urb", row.names(PtoV_urb), sep="."))
#### Juntar los dos .shp
Pto_varas_sp <- bind(PtoV_urb, PtoV_rur) # funcion del paquete raster que los une y hace coincidir por columna. Si no tiene valor en la columna pone NA
View(Pto_varas_sp@data)
con <- dbConnect(RSQLite::SQLite(), "D:/PROJECTS/db/CENSO2017/microdatos/MVE.db") #Conexión con la base de datos
DB <- tbl(con, "PERSONAS") # conexión con la tabla de personas
Pto_varas <- DB %>% filter(COMUNA==10109) %>% collect() #desde aquí podemos tratarlo como dataframe típico
GEOCODIGO<-unique(Pto_varas$ID_ZONA_LOC)
CANT_PER<-NULL
for(localidad in unique(Pto_varas$ID_ZONA_LOC)){
A<-subset(Pto_varas,ID_ZONA_LOC == localidad)
CANT_PER<-c(CANT_PER,dim(A)[1])
}
data<-data.frame(GEOCODIGO=as.character(GEOCODIGO),CANT_PER)
Pto_varas<-merge(x=Pto_varas_sp,y=data,by.x="GEOCODIGO",by.y="GEOCODIGO")
class(Pto_varas)
View(Pto_varas@data)
writeOGR(obj=Pto_varas, dsn="out", layer="Pto_varas", driver="ESRI Shapefile")
Zonas_urbanas <- readShapePoly(fn='R10/ZONA_C17.shp', IDvar=NULL)
Localidades_rurales <- readShapePoly(fn='R10/LOCALIDAD_C17.shp', IDvar=NULL)
names(Zonas_urbanas) # revisamos el atributo o columna de cada una de las capas
names(Localidades_rurales)
library(rgdal)
library(DBI)
library(dplyr)
library(raster)
library(sf)
Zonas_urbanas <- readShapePoly(fn='R10/ZONA_C17.shp', IDvar=NULL)
Localidades_rurales <- readShapePoly(fn='R10/LOCALIDAD_C17.shp', IDvar=NULL)
names(Zonas_urbanas) # revisamos el atributo o columna de cada una de las capas
names(Localidades_rurales)
PtoV_urb <- subset(Zonas_urbanas,COMUNA == 10109)
PtoV_rur <- subset(Localidades_rurales,COMUNA == 10109)
PtoV_rur<-spChFIDs(PtoV_rur, paste("PtoV_rur", row.names(PtoV_rur), sep=".")) # les entrega una ID
PtoV_urb<-spChFIDs(PtoV_urb, paste("PtoV_urb", row.names(PtoV_urb), sep="."))
Pto_varas_sp <- bind(PtoV_urb, PtoV_rur) # funcion del paquete raster que los une y hace coincidir por columna. Si no tiene valor en la columna pone NA
con <- dbConnect(RSQLite::SQLite(), "D:/PROJECTS/db/CENSO2017/microdatos/MVE.db")
DB <- tbl(con, "PERSONAS")
Pto_varas <- DB %>% filter(COMUNA==10109) %>% collect()
Zonas_urbanas <- readShapePoly(fn='R10/ZONA_C17.shp', IDvar=NULL)
Localidades_rurales <- readShapePoly(fn='R10/LOCALIDAD_C17.shp', IDvar=NULL)
names(Zonas_urbanas) # revisamos el atributo o columna de cada una de las capas
names(Localidades_rurales)
PtoV_urb <- subset(Zonas_urbanas,COMUNA == 10109)
PtoV_rur <- subset(Localidades_rurales,COMUNA == 10109)
PtoV_rur<-spChFIDs(PtoV_rur, paste("PtoV_rur", row.names(PtoV_rur), sep=".")) # les entrega una ID
PtoV_urb<-spChFIDs(PtoV_urb, paste("PtoV_urb", row.names(PtoV_urb), sep="."))
PtoV_urb <- subset(Zonas_urbanas,COMUNA == 10109)
PtoV_rur <- subset(Localidades_rurales,COMUNA == 10109)
PtoV_rur<-spChFIDs(PtoV_rur, paste("PtoV_rur", row.names(PtoV_rur), sep=".")) # les entrega una ID
PtoV_urb<-spChFIDs(PtoV_urb, paste("PtoV_urb", row.names(PtoV_urb), sep="."))
Pto_varas_sp <- bind(PtoV_urb, PtoV_rur) # funcion del paquete raster que los une y hace coincidir por columna. Si no tiene valor en la columna pone NA
con <- dbConnect(RSQLite::SQLite(), "D:/PROJECTS/db/CENSO2017/microdatos/MVE.db")
DB <- tbl(con, "PERSONAS")
Pto_varas <- DB %>% filter(COMUNA==10109) %>% collect()
GEOCODIGO<-unique(Pto_varas$ID_ZONA_LOC)
CANT_PER<-NULL
for(localidad in unique(Pto_varas$ID_ZONA_LOC)){
A<-subset(Pto_varas,ID_ZONA_LOC == localidad)
CANT_PER<-c(CANT_PER,dim(A)[1])
}
data<-data.frame(GEOCODIGO=as.character(GEOCODIGO),CANT_PER)
hist(data$GEOCODIGO)
GEOCODIGO<-unique(Pto_varas$ID_ZONA_LOC)
CANT_PER<-NULL
for(localidad in unique(Pto_varas$ID_ZONA_LOC)){
A<-subset(Pto_varas,ID_ZONA_LOC == localidad)
CANT_PER<-c(CANT_PER,dim(A)[1])
}
data<-data.frame(GEOCODIGO=as.character(GEOCODIGO),CANT_PER)
hist(data$CANT_PER)
GEOCODIGO<-unique(Pto_varas$ID_ZONA_LOC)
CANT_PER<-NULL
for(localidad in unique(Pto_varas$ID_ZONA_LOC)){
A<-subset(Pto_varas,ID_ZONA_LOC == localidad)
CANT_PER<-c(CANT_PER,dim(A)[1])
}
data<-data.frame(GEOCODIGO=as.character(GEOCODIGO),CANT_PER)
hist(data$CANT_PER,xlab='cantidad personas')
Pto_varas<-merge(x=Pto_varas_sp,y=data,by.x="GEOCODIGO",by.y="GEOCODIGO")
writeOGR(obj=Pto_varas, dsn="out", layer="Pto_varas", driver="ESRI Shapefile",overwrite_layer=TRUE)
Zonas_urbanas <- readShapePoly(fn='R10/ZONA_C17.shp', IDvar=NULL)
Localidades_rurales <- readShapePoly(fn='R10/LOCALIDAD_C17.shp', IDvar=NULL)
names(Zonas_urbanas) # revisamos el atributo o columna de cada una de las capas
names(Localidades_rurales)
library(rgdal)
library(DBI)
library(dplyr)
library(raster)
library(sf)
library(rgdal)
library(DBI)
library(dplyr)
library(raster)
library(sf)
Zonas_urbanas <- readShapePoly(fn='R10/ZONA_C17.shp', IDvar=NULL)
Localidades_rurales <- readShapePoly(fn='R10/LOCALIDAD_C17.shp', IDvar=NULL)
names(Zonas_urbanas) # revisamos el atributo o columna de cada una de las capas
names(Localidades_rurales)
Zonas_urbanas <- readShapePoly(fn='R10/ZONA_C17.shp', IDvar=NULL)
Localidades_rurales <- readShapePoly(fn='R10/LOCALIDAD_C17.shp', IDvar=NULL)
names(Zonas_urbanas)
names(Localidades_rurales)
Zonas_urbanas <- readShapePoly(fn='R10/ZONA_C17.shp', IDvar=NULL)
Localidades_rurales <- readShapePoly(fn='R10/LOCALIDAD_C17.shp', IDvar=NULL)
names(Zonas_urbanas)
names(Localidades_rurales)
library(rgdal)
library(DBI)
library(dplyr)
library(raster)
library(sf)
Zonas_urbanas <- st_read(fn='R10/ZONA_C17.shp', IDvar=NULL)
library(rgdal)
library(DBI)
library(dplyr)
library(raster)
library(sf)
library(maptools)
library(rgdal)
library(DBI)
library(dplyr)
library(raster)
library(sf)
library(maptools)
Entidades<- readShapePoly('R10/ENTIDAD_IND_C17.shp')
Entidad_pto_varas <- subset(Entidades,COMUNA == 10109)
densidad<-Entidad_pto_varas@data
names(densidad)
PtoV_urb <- subset(Zonas_urbanas,COMUNA == 10109)
PtoV_rur <- subset(Localidades_rurales,COMUNA == 10109)
PtoV_rur<-spChFIDs(PtoV_rur, paste("PtoV_rur", row.names(PtoV_rur), sep=".")) PtoV_urb<-spChFIDs(PtoV_urb, paste("PtoV_urb", row.names(PtoV_urb), sep="."))
PtoV_urb <- subset(Zonas_urbanas,COMUNA == 10109)
PtoV_rur <- subset(Localidades_rurales,COMUNA == 10109)
PtoV_rur<-spChFIDs(PtoV_rur, paste("PtoV_rur", row.names(PtoV_rur), sep=".")) PtoV_urb<-spChFIDs(PtoV_urb, paste("PtoV_urb", row.names(PtoV_urb), sep="."))
densidad<-Entidad_pto_varas@data$TOTAL_PERS/Entidad_pto_varas@data$SHAPE_Area
hist(densidad)
summary(Entidad_pto_varas@data$SHAPE_Area)
library(rgdal)
library(DBI)
library(dplyr)
library(raster)
library(sf)
library(maptools)
options(scipen=999)
densidad<-Entidad_pto_varas@data$TOTAL_PERS/Entidad_pto_varas@data$SHAPE_Area
hist(densidad)
summary(Entidad_pto_varas@data$SHAPE_Area)
densidad<-Entidad_pto_varas@data$TOTAL_PERS/(Entidad_pto_varas@data$SHAPE_Area)*10000
hist(densidad)
summary(Entidad_pto_varas@data$SHAPE_Area)
densidad<-Entidad_pto_varas@data$TOTAL_PERS/(Entidad_pto_varas@data$SHAPE_Area)/10000
hist(densidad)
summary(Entidad_pto_varas@data$SHAPE_Area)
densidad<-Entidad_pto_varas@data$TOTAL_PERS/(Entidad_pto_varas@data$SHAPE_Area)/10000
hist(densidad)
summary((Entidad_pto_varas@data$SHAPE_Area)/1000000)
densidad<-Entidad_pto_varas@data$TOTAL_PERS/(Entidad_pto_varas@data$SHAPE_Area)/10000
hist(densidad)
str(Entidad_pto_varas@polygons)
densidad<-Entidad_pto_varas@data$TOTAL_PERS/(Entidad_pto_varas@data$SHAPE_Area)/10000
hist(densidad)
Entidad_pto_varas@polygons$area
Entidad_pto_varas@polygons$area
Entidad_pto_varas@polygons
surfArea(Entidad_pto_varas@polygons)
surfaceArea(Entidad_pto_varas@polygons)
surfaceArea(Entidad_pto_varas)
area(surfaceArea)
densidad<-Entidad_pto_varas@data$TOTAL_PERS/(Entidad_pto_varas@data$SHAPE_Area)/10000
hist(densidad)
areaPoly(Entidad_pto_varas)
densidad<-Entidad_pto_varas@data$TOTAL_PERS/(Entidad_pto_varas@data$SHAPE_Area)/10000
hist(densidad)
areaPoly(sp.object=Entidad_pto_varas)
densidad<-Entidad_pto_varas@data$TOTAL_PERS/(Entidad_pto_varas@data$SHAPE_Area)/10000
hist(densidad)
areaPoly(sp.object=Entidad_pto_varas)
densidad<-Entidad_pto_varas@data$TOTAL_PERS/(Entidad_pto_varas@data$SHAPE_Area)/10000
hist(densidad)
area.Poly(sp.object=Entidad_pto_varas)
library(rgdal)
library(DBI)
library(dplyr)
library(raster)
library(sf)
library(maptools)
library(rgeos)
options(scipen=999)
densidad<-Entidad_pto_varas@data$TOTAL_PERS/(Entidad_pto_varas@data$SHAPE_Area)/10000
hist(densidad)
gArea(Entidad_pto_varas)
densidad<-Entidad_pto_varas@data$TOTAL_PERS/(Entidad_pto_varas@data$SHAPE_Area)/10000
hist(densidad)
area(Entidad_pto_varas)
densidad<-Entidad_pto_varas@data$TOTAL_PERS/area(Entidad_pto_varas)/10000
hist(densidad)
area(Entidad_pto_varas)
densidad<-Entidad_pto_varas@data$TOTAL_PERS/area(Entidad_pto_varas)
hist(densidad)
area(Entidad_pto_varas)
Entidad_pto_varas
Entidades<- readShapePoly('R10/ENTIDAD_IND_C17.shp',crs = 4326)
crs(Entidades)
crs(Entidades)<-4326
class(Entidades)
crs(3819)
crs(5361)
crs(32719)
CRS(32719)
Entidades<- readShapePoly('R10/ENTIDAD_IND_C17.shp',proj4string =crs("+init=epsg:32719"))
Entidad_pto_varas <- subset(Entidades,COMUNA == 10109)
densidad<-Entidad_pto_varas@data$TOTAL_PERS/area(Entidad_pto_varas)
hist(densidad)
area(Entidad_pto_varas)
Entidades<- readShapePoly('R10/ENTIDAD_IND_C17.shp',proj4string =crs("+init=epsg:32719"))
Entidad_pto_varas <- subset(Entidades,COMUNA == 10109)
densidad<-Entidad_pto_varas@data$TOTAL_PERS/area(Entidad_pto_varas)
hist(densidad)
area(Entidad_pto_varas)
Entidades
Entidad_pto_varas
densidad<-Entidad_pto_varas@data$TOTAL_PERS/area(Entidad_pto_varas)
hist(densidad)
area(Entidad_pto_varas)
area(Entidad_pto_varas)
Entidad_pto_varas
Entidad_pto_varas@proj4string
Entidad_pto_varas@bbox
Entidad_pto_varas@plotOrder
area(Entidad_pto_varas)
Entidades<- reafOGR('R10/ENTIDAD_IND_C17.shp',proj4string =crs("+init=epsg:32719"))
Entidades<- readOGR('R10/ENTIDAD_IND_C17.shp',proj4string =crs("+init=epsg:32719"))
Entidades<- st_read('R10/ENTIDAD_IND_C17.shp',proj4string =crs("+init=epsg:32719"))
Entidades<- readShapePoly('R10/ENTIDAD_IND_C17.shp',proj4string =crs("+init=epsg:32719"))
Entidad_pto_varas <- subset(Entidades,COMUNA == 10109)
Entidades<- shapefile('R10/ENTIDAD_IND_C17.shp')
Entidad_pto_varas <- subset(Entidades,COMUNA == 10109)
Entidades<- shapefile('R10/ENTIDAD_IND_C17.shp',proj4string =crs("+init=epsg:32719"))
Entidades<- shapefile('R10/ENTIDAD_IND_C17.shp')
Entidad_pto_varas <- subset(Entidades,COMUNA == 10109)
Entidades<- shapefile('R10/ENTIDAD_IND_C17.shp')
crs(x)
Entidades<- shapefile('R10/ENTIDAD_IND_C17.shp')
crs(Entidades)
Entidad_pto_varas <- subset(Entidades,COMUNA == 10109)
Entidades<- shapefile('R10/ENTIDAD_IND_C17.shp')
#crs(Entidades)<-
Entidad_pto_varas <- subset(Entidades,COMUNA == 10109)
raster::area(Entidad_pto_varas)
Entidades<- shapefile('R10/ENTIDAD_IND_C17.shp')
Entidad_pto_varas <- subset(Entidades,COMUNA == 10109)
#raster::area(Entidad_pto_varas)
crs(Entidades)
Entidades<- shapefile('R10/ENTIDAD_IND_C17.shp')
Entidad_pto_varas <- subset(Entidades,COMUNA == 10109)
Entidad_pto_varas <- spTransform(Entidad_pto_varas, crs("+init=epsg:32719"))
raster::area(Entidad_pto_varas)
area(Entidad_pto_varas)
densidad <- Entidad_pto_varas@data$TOTAL_PERS / (area(Entidad_pto_varas))/10000
hist(densidad)
area(Entidad_pto_varas))/10000
area(Entidad_pto_varas)
area(Entidad_pto_varas)/10000
densidad <- Entidad_pto_varas@data$TOTAL_PERS / (area(Entidad_pto_varas)/10000)
hist(densidad)
densidad <- Entidad_pto_varas@data$TOTAL_PERS / (area(Entidad_pto_varas)/10000)
hist(densidad,xlab='cantidad personas por ha')
hist(log(densidad),xlab='cantidad personas por ha')
library(rgdal)
library(DBI)
library(dplyr)
library(raster)
#library(sf)
library(maptools)
library(rgeos)
options(scipen=999)
Zonas_urbanas <- readShapePoly(fn='R10/ZONA_C17.shp', IDvar=NULL)
Localidades_rurales <- readShapePoly(fn='R10/LOCALIDAD_C17.shp', IDvar=NULL)
names(Zonas_urbanas) # revisamos el atributo o columna de cada una de las capas
names(Localidades_rurales)
Zonas_urbanas@data
View(Zonas_urbanas@data)
PtoV_urb <- subset(Zonas_urbanas,COMUNA == 10109)
PtoV_rur <- subset(Localidades_rurales,COMUNA == 10109)
PtoV_urb <- subset(Zonas_urbanas,COMUNA == 10109)
PtoV_rur <- subset(Localidades_rurales,COMUNA == 10109)
PtoV_rur<-spChFIDs(PtoV_rur, paste("PtoV_rur", row.names(PtoV_rur), sep=".")) # les entrega una ID
PtoV_urb<-spChFIDs(PtoV_urb, paste("PtoV_urb", row.names(PtoV_urb), sep="."))
plot(PtoV_rur)
plot(PtoV_urb)
Pto_varas_sp <- bind(PtoV_urb, PtoV_rur) # funcion del paquete raster que los une y hace coincidir por columna. Si no tiene valor en la columna pone NA
View(Pto_varas_sp@data)
Pto_varas <- DB %>% filter(COMUNA==10109) %>% collect() #desde aquí podemos tratarlo como dataframe típico
library(rgdal)
library(DBI)
library(dplyr)
library(raster)
#library(sf)
library(maptools)
library(rgeos)
options(scipen=999)
Pto_varas <- DB %>% filter(COMUNA==10109) %>% collect() #desde aquí podemos tratarlo como dataframe típico
Pto_varas <- DB %>% filter(COMUNA==10109) %>% collect() #desde aquí podemos tratarlo como dataframe típico
GEOCODIGO<-unique(Pto_varas$ID_ZONA_LOC)
DB <- tbl(con, "PERSONAS") # conexión con la tabla de personas
con <- dbConnect(RSQLite::SQLite(), "D:/PROJECTS/db/CENSO2017/microdatos/MVE.db") #Conexión con la base de datos
DB <- tbl(con, "PERSONAS") # conexión con la tabla de personas
Pto_varas <- DB %>% filter(COMUNA==10109) %>% collect() #desde aquí podemos tratarlo como dataframe típico
library(rgdal)
library(DBI)
library(dplyr)
library(raster)
#library(sf)
library(maptools)
library(rgeos)
options(scipen=999)
A<-c('A','A','B','C')
unique(A)
GEOCODIGO<-unique(Pto_varas$ID_ZONA_LOC)
CANT_PER<-NULL
A<-c('A','A','A','B','B','B','C')
unique(A)
data.frame(A,)
nombre<-c('pedro','juan','diego','nicolas','profe cerda','rodrigo','nico toro')
data.frame(nombre,A)
shp<-data.frame(nombre,A)
subset(shp,A='B')
subset(shp,A=='B')
dim(shp)
dim(shp)[1]
GEOCODIGO<-unique(Pto_varas$ID_ZONA_LOC)
CANT_PER<-NULL
for(localidad in unique(Pto_varas$ID_ZONA_LOC)){
A<-subset(Pto_varas,ID_ZONA_LOC == localidad)
CANT_PER<-c(CANT_PER,dim(A)[1])
}
CANT_PER
data<-data.frame(GEOCODIGO=as.character(GEOCODIGO),CANT_PER)
View(data)
hist(data$CANT_PER)
GEOCODIGO<-unique(Pto_varas$ID_ZONA_LOC)
GEOCODIGO
Pto_varas$ID_ZL_PER
Pto_varas$ID_ZL_PER
for(localidad in unique(Pto_varas$ID_ZONA_PER)){
A<-subset(Pto_varas,ID_ZONA_LOC == localidad)
CANT_PER<-c(CANT_PER,dim(A)[1])
}
for(localidad in unique(Pto_varas$ID_ZONA_PER)){
A<-subset(Pto_varas,ID_ZONA_PER == localidad)
CANT_PER<-c(CANT_PER,dim(A)[1])
}
GEOCODIGO<-unique(Pto_varas$ID_ZONA_PER)
Pto_varas <- DB %>% filter(COMUNA==10109) %>% collect() #desde aquí podemos tratarlo como dataframe típico
GEOCODIGO<-unique(Pto_varas$ID_ZONA_PER)
Pto_varas
names(Pto_varas)
Pto_varas$ID_ZL_PER
GEOCODIGO<-unique(Pto_varas$ID_ZL_PER)
CANT_PER<-NULL
for(localidad in unique(Pto_varas$ID_ZL_PER)){
A<-subset(Pto_varas,ID_ZL_PER == localidad)
CANT_PER<-c(CANT_PER,dim(A)[1])
}
data<-data.frame(GEOCODIGO=as.character(GEOCODIGO),CANT_PER)
hist(data$CANT_PER)
Pto_varas<-merge(x=Pto_varas_sp,y=data,by.x="GEOCODIGO",by.y="GEOCODIGO")
Pto_varas<-merge(x=Pto_varas_sp,y=data,by.x="GEOCODIGO",by.y="GEOCODIGO")
writeOGR(obj=Pto_varas, dsn="out", layer="Pto_varas", driver="ESRI Shapefile")
writeOGR(obj=Pto_varas, dsn="out", layer="Pto_varas", driver="ESRI Shapefile",overwrite_layer = TRUE)
aproyectar <- readShapePoly(fn='out/Pto_varas.shp', IDvar=NULL)
utm <- '+proj=utm +zone=19 + south=T ellps=WGS84'
utm <- '+proj=utm +zone=19 + south=T ellps=WGS84'
proj4string(aproyectar) <- utm
crs(sproyectar)
crs(aproyectar)
class(aproyectar)
### exportarlo
crs<- crs("+init=epsg:32719")
utm <- '+proj=utm +zone=19 + south=T ellps=WGS84'
aproyectar <- readShapePoly(fn='out/Pto_varas.shp', IDvar=NULL,proj4string = crs)
proj4string(aproyectar) <- utm
### exportarlo
crs<- crs("+init=epsg:32719")
aproyectar <- readShapePoly(fn='out/Pto_varas.shp', IDvar=NULL,proj4string = crs)
writeOGR(obj=Pto_varas, dsn="out", layer="Pto_varas", driver="ESRI Shapefile",overwrite_layer = TRUE)
writeOGR(obj=aproyectar, dsn="out", layer="Pto_varas", driver="ESRI Shapefile",overwrite_layer = TRUE)
CANT_PER
hist(data$CANT_PER)
Pto_varas$GEOCODIGO
GEOCODIGO
Pto_varas<-merge(x=Pto_varas_sp,y=data,by.x="GEOCODIGO",by.y="GEOCODIGO")
Pto_varas
Pto_varas@data
Pto_varas@proj4string
crs("+init=epsg:32719")
library(rgdal)
library(DBI)
library(dplyr)
library(raster)
library(maptools)
library(rgeos)
options(scipen=999)
crs("+init=epsg:32719")
crs(epsg:32719")
class(Pto_varas)
Pto_varas<-SpatialPolygonsDataFrame(Pto_varas)
Pto_varas<-SpatialPolygonsDataFrame(data=Pto_varas@data,SP=Pto_varas@polygons)
crs(Pto_varas)
Pto_varas<-spTransform(Pto_varas,crs("+init=epsg:32719"))
spTransform(Pto_varas,crs='+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0')
CRS('+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0')
spTransform(Pto_varas,CRS('+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0'))
CRSargs(CRS('+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0'))
spTransform(Pto_varas,CRSargs(CRS('+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0')))
spTransform(Pto_varas, CRS("+init=epsg:26978")
)
Zonas_urbanas@proj4string
crs("+init=epsg:32719")
Zonas_urbanas <- readShapePoly(fn='R10/ZONA_C17.shp', IDvar=NULL,proj4string=crs("+init=epsg:32719"))
Localidades_rurales <- readShapePoly(fn='R10/LOCALIDAD_C17.shp', IDvar=NULL,proj4string=crs("+init=epsg:32719"))
Zonas_urbanas@proj4string
library(rgdal)
library(DBI)
library(dplyr)
library(raster)
library(maptools)
library(rgeos)
options(scipen=999)
#### --- Preparación datos espaciales
Zonas_urbanas <- readShapePoly(fn='R10/ZONA_C17.shp', IDvar=NULL,proj4string=crs("+init=epsg:32719"))
Localidades_rurales <- readShapePoly(fn='R10/LOCALIDAD_C17.shp', IDvar=NULL,proj4string=crs("+init=epsg:32719"))
names(Zonas_urbanas) # revisamos el atributo o columna de cada una de las capas
names(Localidades_rurales)
#### --- Filtrar por comuna -> Pto varas: 10109 <- fuente: manual del usuario censista
PtoV_urb <- subset(Zonas_urbanas,COMUNA == 10109)
PtoV_rur <- subset(Localidades_rurales,COMUNA == 10109)
PtoV_rur<-spChFIDs(PtoV_rur, paste("PtoV_rur", row.names(PtoV_rur), sep=".")) # les entrega una ID
PtoV_urb<-spChFIDs(PtoV_urb, paste("PtoV_urb", row.names(PtoV_urb), sep="."))
#### Juntar los dos .shp
Pto_varas_sp <- bind(PtoV_urb, PtoV_rur) # funcion del paquete raster que los une y hace coincidir por columna. Si no tiene valor en la columna pone NA
View(Pto_varas_sp@data)
#### --- Microdatos
con <- dbConnect(RSQLite::SQLite(), "D:/PROJECTS/db/CENSO2017/microdatos/MVE.db") #Conexión con la base de datos
DB <- tbl(con, "PERSONAS") # conexión con la tabla de personas
#### --- Filtrar por microdatos de comuna
Pto_varas <- DB %>% filter(COMUNA==10109) %>% collect() #desde aquí podemos tratarlo como dataframe típico
### ¿cuántas personas hay por zona o por localidad?
GEOCODIGO<-unique(Pto_varas$ID_ZL_PER)
CANT_PER<-NULL
for(localidad in unique(Pto_varas$ID_ZL_PER)){
A<-subset(Pto_varas,ID_ZL_PER == localidad)
CANT_PER<-c(CANT_PER,dim(A)[1])
}
data<-data.frame(GEOCODIGO=as.character(GEOCODIGO),CANT_PER)
hist(data$CANT_PER)
Pto_varas<-merge(x=Pto_varas_sp,y=data,by.x="GEOCODIGO",by.y="GEOCODIGO")
Pto_varas@proj4string
writeOGR(obj=Pto_varas, dsn="out", layer="Pto_varas", driver="ESRI Shapefile",overwrite_layer = TRUE)
Pto_varas@data
writeOGR(obj=Pto_varas, dsn="out", layer="Pto_varas", driver="ESRI Shapefile",overwrite_layer = TRUE)
library(rgdal)
library(DBI)
library(dplyr)
library(raster)
library(maptools)
library(rgeos)
options(scipen=999)
#### --- Preparación datos espaciales
Zonas_urbanas <- readShapePoly(fn='R10/ZONA_C17.shp', IDvar=NULL,proj4string=crs("+init=epsg:4674"))
Localidades_rurales <- readShapePoly(fn='R10/LOCALIDAD_C17.shp', IDvar=NULL,proj4string=crs("+init=epsg:4674"))
names(Zonas_urbanas) # revisamos el atributo o columna de cada una de las capas
names(Localidades_rurales)
#### --- Filtrar por comuna -> Pto varas: 10109 <- fuente: manual del usuario censista
PtoV_urb <- subset(Zonas_urbanas,COMUNA == 10109)
PtoV_rur <- subset(Localidades_rurales,COMUNA == 10109)
PtoV_rur<-spChFIDs(PtoV_rur, paste("PtoV_rur", row.names(PtoV_rur), sep=".")) # les entrega una ID
PtoV_urb<-spChFIDs(PtoV_urb, paste("PtoV_urb", row.names(PtoV_urb), sep="."))
#### Juntar los dos .shp
Pto_varas_sp <- bind(PtoV_urb, PtoV_rur) # funcion del paquete raster que los une y hace coincidir por columna. Si no tiene valor en la columna pone NA
View(Pto_varas_sp@data)
#### --- Microdatos
con <- dbConnect(RSQLite::SQLite(), "D:/PROJECTS/db/CENSO2017/microdatos/MVE.db") #Conexión con la base de datos
DB <- tbl(con, "PERSONAS") # conexión con la tabla de personas
#### --- Filtrar por microdatos de comuna
Pto_varas <- DB %>% filter(COMUNA==10109) %>% collect() #desde aquí podemos tratarlo como dataframe típico
### ¿cuántas personas hay por zona o por localidad?
GEOCODIGO<-unique(Pto_varas$ID_ZL_PER)
CANT_PER<-NULL
for(localidad in unique(Pto_varas$ID_ZL_PER)){
A<-subset(Pto_varas,ID_ZL_PER == localidad)
CANT_PER<-c(CANT_PER,dim(A)[1])
}
data<-data.frame(GEOCODIGO=as.character(GEOCODIGO),CANT_PER)
hist(data$CANT_PER)
### --- cruzar la data mediante columna GEOCODIGO
Pto_varas<-merge(x=Pto_varas_sp,y=data,by.x="GEOCODIGO",by.y="GEOCODIGO")
writeOGR(obj=Pto_varas, dsn="out", layer="Pto_varas", driver="ESRI Shapefile",overwrite_layer = TRUE)
Pto_varas2<-spTransform(Pto_varas1,CRS("+init=epsg:32719"))
Pto_varas1<-merge(x=Pto_varas_sp,y=data,by.x="GEOCODIGO",by.y="GEOCODIGO")
Pto_varas2<-spTransform(Pto_varas1,CRS("+init=epsg:32719"))
Pto_varas1<-merge(x=Pto_varas_sp,y=data,by.x="GEOCODIGO",by.y="GEOCODIGO")
writeOGR(obj=Pto_varas1, dsn="out", layer="Pto_varas_no-project", driver="ESRI Shapefile",overwrite_layer = TRUE)
### reproject
Pto_varas2<-spTransform(Pto_varas1,CRS("+init=epsg:32719"))
writeOGR(obj=Pto_varas2, dsn="out", layer="Pto_varas_project", driver="ESRI Shapefile",overwrite_layer = TRUE)
